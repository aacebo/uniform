import { Injectable, Inject } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { take } from 'rxjs/operators';
import { UniToastPosition } from './toast-position.enum';
import { UniToastComponent } from './toast.component';
import { UNI_TOAST_OPTIONS } from './toast-options.constant';
import { UNI_TOAST_CONFIG } from './toast-config.constant';
import { UniToastRef } from './toast-ref.class';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class UniToastService {
    constructor(_config, _overlay) {
        this._config = _config;
        this._overlay = _overlay;
        this._index = -1;
        this._toasts = [];
    }
    get _id() {
        this._index++;
        return this._index;
    }
    open(options) {
        return this._create(UniToastComponent, options);
    }
    create(component, options) {
        return this._create(component, options);
    }
    remove(id) {
        for (let i = 0; i < this._toasts.length; i++) {
            if (this._toasts[i].id === id) {
                this._toasts.splice(i, 1);
                return i;
            }
        }
        return -1;
    }
    find(id) {
        return this._toasts.find(t => t.id === id);
    }
    _create(component, options) {
        const latest = this._getLatestByPosition(options.position);
        const position = latest ? latest.ref.position : undefined;
        const overlayRef = this._overlay.create({
            panelClass: options.panelClass,
            positionStrategy: this._getPositionStrategy(options.position, position),
        });
        const toastRef = new UniToastRef(overlayRef);
        const portal = new ComponentPortal(component, null, this._getInjector(toastRef, options));
        const instance = overlayRef.attach(portal).instance;
        const toast = {
            id: this._id,
            type: options.type,
            position: options.position,
            component: instance,
            ref: toastRef,
        };
        toastRef.closed$.pipe(take(1)).subscribe(() => {
            this.remove(toast.id);
            this._updatePositions(toast.position);
        });
        this._toasts.push(toast);
        return toast;
    }
    _getInjector(ref, options) {
        const tokens = new WeakMap();
        tokens.set(UniToastRef, ref);
        tokens.set(UNI_TOAST_OPTIONS, options);
        tokens.set(UNI_TOAST_CONFIG, this._config);
        return new PortalInjector(null, tokens);
    }
    _getPositionStrategy(position, latest) {
        const pb = this._overlay.position().global();
        if (position === UniToastPosition.TopLeft) {
            return pb.top(this._getLatestMargin(position, latest)).left(`${this._config.margin}px`);
        }
        else if (position === UniToastPosition.TopRight) {
            return pb.top(this._getLatestMargin(position, latest)).right(`${this._config.margin}px`);
        }
        else if (position === UniToastPosition.BottomLeft) {
            if (!latest) {
                return pb.bottom(this._getLatestMargin(position, latest)).left(`${this._config.margin}px`);
            }
            else {
                return pb.top(this._getLatestMargin(position, latest)).left(`${this._config.margin}px`);
            }
        }
        if (!latest) {
            return pb.bottom(this._getLatestMargin(position, latest)).right(`${this._config.margin}px`);
        }
        else {
            return pb.top(this._getLatestMargin(position, latest)).right(`${this._config.margin}px`);
        }
    }
    _getLatestMargin(position, latest) {
        const key = (position === UniToastPosition.TopLeft || position === UniToastPosition.TopRight) ? 'bottom' : 'top';
        if (key === 'bottom') {
            return latest ? `${latest[key] + this._config.margin}px` : `${this._config.margin}px`;
        }
        else {
            return latest ? `${latest[key] - latest.height - this._config.margin}px` : `${this._config.margin}px`;
        }
    }
    _getToastsByPosition(position) {
        return this._toasts.filter(t => t.position === position)
            .sort((a, b) => a.id - b.id);
    }
    _getLatestByPosition(position) {
        const toasts = this._getToastsByPosition(position);
        return toasts[toasts.length - 1];
    }
    _updatePositions(position) {
        const toasts = this._getToastsByPosition(position);
        for (let i = 0; i < toasts.length; i++) {
            toasts[i].ref.updatePosition(this._getPositionStrategy(toasts[i].position, toasts[i - 1] ? toasts[i - 1].ref.position : undefined));
        }
    }
}
UniToastService.ɵfac = function UniToastService_Factory(t) { return new (t || UniToastService)(i0.ɵɵinject(UNI_TOAST_CONFIG), i0.ɵɵinject(i1.Overlay)); };
UniToastService.ɵprov = i0.ɵɵdefineInjectable({ token: UniToastService, factory: UniToastService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UniToastService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [UNI_TOAST_CONFIG]
            }] }, { type: i1.Overlay }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,