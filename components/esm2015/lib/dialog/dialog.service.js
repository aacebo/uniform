import { Injectable, ComponentFactoryResolver } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { take } from 'rxjs/operators';
import { UniDialogRef } from './dialog-ref.class';
import { UniDialogContainerComponent } from './components/dialog-container/dialog-container.component';
import { UNI_DIALOG_OPTIONS, UNI_DIALOG_DEFAULT_OPTIONS } from './dialog-options.constant';
import { UNI_DIALOG_CONTENT } from './dialog-content.constant';
import { UNI_DIALOG_DATA } from './dialog-data.constant';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class UniDialogService {
    constructor(_overlay, _resolver) {
        this._overlay = _overlay;
        this._resolver = _resolver;
        this._index = -1;
        this._dialogs = [];
    }
    get _id() {
        this._index++;
        return this._index;
    }
    find(id) {
        return this._dialogs.find(t => t.id === id);
    }
    remove(id) {
        for (let i = 0; i < this._dialogs.length; i++) {
            if (this._dialogs[i].id === id) {
                this._dialogs.splice(i, 1);
                return i;
            }
        }
        return -1;
    }
    open(content, options) {
        const overlayRef = this._overlay.create(Object.assign(Object.assign(Object.assign({}, UNI_DIALOG_DEFAULT_OPTIONS), options), { positionStrategy: this._getPositionStrategy() }));
        const dialogRef = new UniDialogRef(overlayRef, options.disableClose);
        const portal = new ComponentPortal(UniDialogContainerComponent, undefined, this._getInjector(dialogRef, content, options));
        overlayRef.attach(portal);
        const dialog = {
            id: this._id,
            ref: dialogRef,
        };
        dialogRef.closed$.pipe(take(1)).subscribe(() => {
            this.remove(dialog.id);
        });
        this._dialogs.push(dialog);
        return dialog;
    }
    _getInjector(ref, content, options) {
        const tokens = new WeakMap();
        tokens.set(ComponentFactoryResolver, this._resolver);
        tokens.set(UniDialogRef, ref);
        tokens.set(UNI_DIALOG_OPTIONS, options);
        tokens.set(UNI_DIALOG_CONTENT, content);
        if (options.data) {
            tokens.set(UNI_DIALOG_DATA, options.data);
        }
        return new PortalInjector(null, tokens);
    }
    _getPositionStrategy() {
        const pb = this._overlay.position().global();
        return pb.centerVertically().centerHorizontally();
    }
}
UniDialogService.ɵfac = function UniDialogService_Factory(t) { return new (t || UniDialogService)(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.ComponentFactoryResolver)); };
UniDialogService.ɵprov = i0.ɵɵdefineInjectable({ token: UniDialogService, factory: UniDialogService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UniDialogService, [{
        type: Injectable
    }], function () { return [{ type: i1.Overlay }, { type: i0.ComponentFactoryResolver }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdW5pZm9ybS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2RpYWxvZy9kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDdkcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0YsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7QUFHekQsTUFBTSxPQUFPLGdCQUFnQjtJQVMzQixZQUNtQixRQUFpQixFQUNqQixTQUFtQztRQURuQyxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQTBCO1FBVjlDLFdBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNILGFBQVEsR0FBaUIsRUFBRSxDQUFDO0lBVTFDLENBQUM7SUFSSixJQUFZLEdBQUc7UUFDYixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQU9ELElBQUksQ0FBQyxFQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENB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eVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsLCBQb3J0YWxJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgSVVuaURpYWxvZyB9IGZyb20gJy4vZGlhbG9nLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJVW5pRGlhbG9nT3B0aW9ucyB9IGZyb20gJy4vZGlhbG9nLW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFVuaURpYWxvZ1JlZiB9IGZyb20gJy4vZGlhbG9nLXJlZi5jbGFzcyc7XG5pbXBvcnQgeyBVbmlEaWFsb2dDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZGlhbG9nLWNvbnRhaW5lci9kaWFsb2ctY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBVTklfRElBTE9HX09QVElPTlMsIFVOSV9ESUFMT0dfREVGQVVMVF9PUFRJT05TIH0gZnJvbSAnLi9kaWFsb2ctb3B0aW9ucy5jb25zdGFudCc7XG5pbXBvcnQgeyBVTklfRElBTE9HX0NPTlRFTlQgfSBmcm9tICcuL2RpYWxvZy1jb250ZW50LmNvbnN0YW50JztcbmltcG9ydCB7IFVOSV9ESUFMT0dfREFUQSB9IGZyb20gJy4vZGlhbG9nLWRhdGEuY29uc3RhbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVW5pRGlhbG9nU2VydmljZSB7XG4gIHByaXZhdGUgX2luZGV4ID0gLTE7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2RpYWxvZ3M6IElVbmlEaWFsb2dbXSA9IFtdO1xuXG4gIHByaXZhdGUgZ2V0IF9pZCgpIHtcbiAgICB0aGlzLl9pbmRleCsrO1xuICAgIHJldHVybiB0aGlzLl9pbmRleDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX292ZXJsYXk6IE92ZXJsYXksXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgKSB7fVxuXG4gIGZpbmQoaWQ6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl9kaWFsb2dzLmZpbmQodCA9PiB0LmlkID09PSBpZCk7XG4gIH1cblxuICByZW1vdmUoaWQ6IG51bWJlcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZGlhbG9ncy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX2RpYWxvZ3NbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZ3Muc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBvcGVuPFQgPSBhbnk+KGNvbnRlbnQ6IFQsIG9wdGlvbnM/OiBJVW5pRGlhbG9nT3B0aW9ucykge1xuICAgIGNvbnN0IG92ZXJsYXlSZWYgPSB0aGlzLl9vdmVybGF5LmNyZWF0ZSh7XG4gICAgICAuLi5VTklfRElBTE9HX0RFRkFVTFRfT1BUSU9OUyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBwb3NpdGlvblN0cmF0ZWd5OiB0aGlzLl9nZXRQb3NpdGlvblN0cmF0ZWd5KCksXG4gICAgfSk7XG5cbiAgICBjb25zdCBkaWFsb2dSZWYgPSBuZXcgVW5pRGlhbG9nUmVmKG92ZXJsYXlSZWYsIG9wdGlvbnMuZGlzYWJsZUNsb3NlKTtcbiAgICBjb25zdCBwb3J0YWwgPSBuZXcgQ29tcG9uZW50UG9ydGFsKFVuaURpYWxvZ0NvbnRhaW5lckNvbXBvbmVudCwgdW5kZWZpbmVkLCB0aGlzLl9nZXRJbmplY3RvcihkaWFsb2dSZWYsIGNvbnRlbnQsIG9wdGlvbnMpKTtcbiAgICBvdmVybGF5UmVmLmF0dGFjaChwb3J0YWwpO1xuICAgIGNvbnN0IGRpYWxvZzogSVVuaURpYWxvZyA9IHtcbiAgICAgIGlkOiB0aGlzLl9pZCxcbiAgICAgIHJlZjogZGlhbG9nUmVmLFxuICAgIH07XG5cbiAgICBkaWFsb2dSZWYuY2xvc2VkJC5waXBlKHRha2UoMSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZShkaWFsb2cuaWQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fZGlhbG9ncy5wdXNoKGRpYWxvZyk7XG5cbiAgICByZXR1cm4gZGlhbG9nO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0SW5qZWN0b3I8VCA9IGFueT4ocmVmOiBVbmlEaWFsb2dSZWYsIGNvbnRlbnQ6IFQsIG9wdGlvbnM/OiBJVW5pRGlhbG9nT3B0aW9ucykge1xuICAgIGNvbnN0IHRva2VucyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgICB0b2tlbnMuc2V0KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdGhpcy5fcmVzb2x2ZXIpO1xuICAgIHRva2Vucy5zZXQoVW5pRGlhbG9nUmVmLCByZWYpO1xuICAgIHRva2Vucy5zZXQoVU5JX0RJQUxPR19PUFRJT05TLCBvcHRpb25zKTtcbiAgICB0b2tlbnMuc2V0KFVOSV9ESUFMT0dfQ09OVEVOVCwgY29udGVudCk7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICB0b2tlbnMuc2V0KFVOSV9ESUFMT0dfREFUQSwgb3B0aW9ucy5kYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFBvcnRhbEluamVjdG9yKG51bGwsIHRva2Vucyk7XG4gIH1cblxuICBwcml2YXRlIF9nZXRQb3NpdGlvblN0cmF0ZWd5KCkge1xuICAgIGNvbnN0IHBiID0gdGhpcy5fb3ZlcmxheS5wb3NpdGlvbigpLmdsb2JhbCgpO1xuICAgIHJldHVybiBwYi5jZW50ZXJWZXJ0aWNhbGx5KCkuY2VudGVySG9yaXpvbnRhbGx5KCk7XG4gIH1cbn1cbiJdfQ==